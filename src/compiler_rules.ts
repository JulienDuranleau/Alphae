import { binary, grouping, number, Precedence, unary } from "./compiler.js";
import { TokenType } from "./scanner.js";

export type ParseRule = {
    prefix: Function | null,
    infix: Function | null,
    precedence: Precedence,
}

export const rules: Record<TokenType, ParseRule> = {
    [TokenType.LEFT_PAREN]    : {prefix: grouping, infix: null,   precedence: Precedence.NONE},
    [TokenType.RIGHT_PAREN]   : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.LEFT_BRACE]    : {prefix: null,     infix: null,   precedence: Precedence.NONE}, 
    [TokenType.RIGHT_BRACE]   : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.COMMA]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.DOT]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.MINUS]         : {prefix: unary,    infix: binary, precedence: Precedence.TERM},
    [TokenType.PLUS]          : {prefix: null,     infix: binary, precedence: Precedence.TERM},
    [TokenType.SEMICOLON]     : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.SLASH]         : {prefix: null,     infix: binary, precedence: Precedence.FACTOR},
    [TokenType.STAR]          : {prefix: null,     infix: binary, precedence: Precedence.FACTOR},
    [TokenType.BANG]          : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.BANG_EQUAL]    : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.EQUAL]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.EQUAL_EQUAL]   : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.GREATER]       : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.GREATER_EQUAL] : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.LESS]          : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.LESS_EQUAL]    : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.IDENTIFIER]    : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.STRING]        : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.NUMBER]        : {prefix: number,   infix: null,   precedence: Precedence.NONE},
    [TokenType.AND]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.CLASS]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.ELSE]          : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.FALSE]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.FOR]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.FUN]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.IF]            : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.NIL]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.OR]            : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.PRINT]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.RETURN]        : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.SUPER]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.THIS]          : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.TRUE]          : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.VAR]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.WHILE]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.ERROR]         : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.EOF]           : {prefix: null,     infix: null,   precedence: Precedence.NONE},
    [TokenType.START_OF_FILE] : {prefix: null,     infix: null,   precedence: Precedence.NONE},
}